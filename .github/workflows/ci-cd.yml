name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Collect static files
        run: |
          . venv/bin/activate
          python manage.py collectstatic --noinput

      - name: Run test
        run: |
          . venv/bin/activate
          python manage.py test
        continue-on-error: false


  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/oc_lettings_site

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:latest .

      - name: Tag and push Docker images
        run: |
          docker tag $DOCKER_IMAGE:latest $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/oc_lettings_site:latest
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    steps:
      - name: Deploy to Render using Docker image
        run: |
          IMAGE_URL="${{ env.DOCKER_IMAGE }}"
          echo "Deploying image: $IMAGE_URL"
          curl -X POST "https://api.render.com/v1/services/${{ env.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY"