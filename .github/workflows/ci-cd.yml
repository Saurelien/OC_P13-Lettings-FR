name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
# test job
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Collect static files
        run: |
          . venv/bin/activate
          # Test utilisation de white noise dans le test github afin d'ignorer les url manquant dans le css
          python manage.py collectstatic --noinput

      - name: Run tests with coverage
        run: |
          . venv/bin/activate
          coverage run manage.py test
          coverage report -m
          coverage html
        continue-on-error: false

      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/oc_lettings_site

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker image
        run: docker-compose build

      - name: List Docker images
        run: docker images

      - name: Tag and push Docker images
        run: |
          # Taguer l'image avec le hash de commit et le tag latest
          docker tag oc_lettings_site:latest $DOCKER_IMAGE:${{ github.sha }}
          docker tag oc_lettings_site:latest $DOCKER_IMAGE:latest
      
          # Pousser l'images vers Docker Hub
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/oc_lettings_site:latest
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    steps:
      - name: DÃ©ploiement sur Render depuis l'image avec le tag latest
        run: |
          IMAGE_URL="${{ env.DOCKER_IMAGE }}"
          echo "Deploying image: $IMAGE_URL"
          curl -X POST "https://api.render.com/v1/services/${{ env.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
